# -*- coding: utf-8 -*-
"""Teste.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AWG5m16nvPsGkFyTpf1vhfXPeFOUGU8z
"""

import os
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.linear_model import LogisticRegression

from google.colab import drive
drive.mount('/content/drive')

data = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/card_transdata.csv")

data.head()

print(data.shape)

onlycredit = data[(data['used_chip'] == 1.0)]
print(onlycredit.shape)

onlyonline = onlycredit[(onlycredit['online_order'] == 1.0)]
print(onlyonline.shape)

onlyonline.isnull().any().any()

X = onlyonline.drop(['fraud'], axis=1)
Y = onlyonline['fraud']

print(X, Y)

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state = 42, stratify=Y)

lr = LogisticRegression(max_iter=1000)
lr.fit(X_train, Y_train)
pred = lr.predict(X_test)
acc = accuracy_score(Y_test, pred)

f'Acur√°cia:{acc * 100:.2f}'

only_real = onlyonline.fraud
only_total = onlyonline.drop(['fraud'], axis=1)
only_total

pred = lr.predict(only_total)

only_val = pd.DataFrame({'real':only_real, 'previsao':pred})
only_val.head(n=30)

only_val.previsao.value_counts()

only_val.real.value_counts()

import plotly.express as px
px.histogram(onlyonline, x = 'ratio_to_median_purchase_price')

data['credit_and_online'] = np.where (
    (data['used_chip'] == 1.0) & (data['used_pin_number'] == 1.0) & (data['online_order'] == 1.0),
    'yes',
    'no'
)

data

data2 = data[data.credit_and_online != 'no']
data2

data2 = data2.drop([('used_chip')], axis=1)
data2

data2 = data2.drop([('used_pin_number')], axis=1)
data2

data2 = data2.drop([('online_order')], axis=1)
data2

print(data2.shape)

import plotly.express as px
px.histogram(onlyonline, x = 'distance_from_home')

import plotly.express as px
px.histogram(onlyonline, x = 'distance_from_last_transaction')

import matplotlib.pyplot as plt
data2.plot.scatter('distance_from_home', 'distance_from_last_transaction')

from sklearn.tree import DecisionTreeClassifier

arvore = DecisionTreeClassifier(criterion='entropy')
arvore.fit(X_train, Y_train)

arvore.feature_importances_

from sklearn import tree
figura, eixos = plt.subplots(nrows = 1, ncols = 1, figsize = (10,10))
tree.plot_tree(arvore)